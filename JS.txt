/* 
"Data type & structure"

//Data type

1.undefined
2.Boolean(true or flase)
3.Number
4.string // ("") or ('')
5.bigint
6.symbol
7.null
<1-6 primitive>
<7 special primitive type>

//Structure type

8.object
9.fuction

*/

Reserved words

-let
-break
-case.....

/*
Declarations
1.var<first>
2.let<useful>
3.const
<reserved words>
*/

//difference let and const

//let
let email;
let email = "zwehtetag@gmail.com";

//const
const  email; //no use
const  email = "zwehtetag@gmail.com"; // give variable name immediately

//update & rewrite
let email = "zwehtetag@gmail.com";
email = "william@gmail.com";
const email = "wzwehtetag@gmail.com";
email = "william@gmail.com"; //no rewrite & raise error

//
let email;//first name
let email;<second name can give same to "email" again 
const email = "zwehtetag@gmail.com";
const email = "william@gmail.com";//no use same variable name

//case sensitive
Let user = " zwe"; //no use
Const user = "htet";//no use

/*
 -javascript must start with a letter(a-z , A-Z), underscore(_), dollar sign($) and no use number
 -no use reserved words for variable name
 -no space between words(lastNameFirstName)
 */

 //Operators
 /*Arithemetic operators*/

 // +(Addition)
 let num1 =5;
 let num2 =6;
 let num3 = num1 + num2; // num3 = 11

 let str1 = "hello";
 let str2 = "world";
 let str3 = "hello" + "world"; //str3 ="helloworld" (string concatenation)
 let str3 = "hello" +  " " + "world"; //str3 ="hello world"

 //-(Subtraction)
 let num1 = 2;
 let num2 = 3;
 let num3 = num1 - num2;//num3 = -1

 //*(multiplication)
 let num1 = 5;
 let num1 = 6;
 let num3 = num1 * num2;//num3 = 30

 // / (division)
 let num1 = 6;
 let num1 = 2;
 let num3 = num1 / num2;//num3 = 3

// % (remainder)
let num1 = 7;
let num1 = 2;
let num3 = num1 % num2;//num3 = 1

// ** (exponent)
let num1 = 6;
let num1 = 2;
let num3 = num1 ** num2;//num3 = 36

/* Increment & Decrement */

//++(increment)
let num1 = 4;
let num2 = num1++ ;//num2 = 5

//--(decrement)
let num1 = 4;
let num2 = num1-- ;//num2 = 3

//cannot do 1++ for example , must use  variable that is not  constant(const)

/* Assignment operators */

// =(equal)
let num = 1 ;

// +=(Addition assignment)
let num1 = 8 ;
num1 += 1; //num1 = 9

//-=(Subtraction assignment)
let num1 = 8 ;
num1 -= 2; //num1 = 6

//*=(Multiplication assignment)
let num1 = 8 ;
num1 *= 3; //num1 = 24

//+=(Division assignment)
let num1 = 8 ;
num1 /=  2 ; //num1 = 4

/* Comparison operators */

// == Vs ===
let num = "5";
num == "5"; //output true (change string to num)
num === "5"; //output false ( no change string to num)

let num = 5;
num == 5; //output true (change string to num)
num === 5; //output true ( no change string to num)

//!== vs !===
let num = "5";
num !== "5"; //output false
num !=== "5"; //output true

// > (greater than) and  < (less than)
let num1 = 7;
let num2 = 8;
num1 > num2; //output false
num1 < num2; //output true

// >= (greater than or equal to) and  < (less than or equal to)
let num1 = 5;
let num2 = 6;
num1 >= num2; //output false
num1 <= num2; //output true

/* logical opertaors */

let num1 = 5;
let num2 = 10;

// && (and logical operator)
num1 > 3 && num2 < 10; //output false
num1 < 7 && num2 > 5; //output true

// || (or logical operator)
num1 > 3 || num2 < 10 ; //output true
num1 > 7 || num2 < 5 ; //output false
num1 >= 5 || num2 <= 10 ; //output true

// ! (not logical operator)
!(num1 === num2) //true
!(num1 < num2)  //flase

/* Conditional statement */

//if 
const num1 = 2;
const num2 = 6;
if (num1 === 2){
    num2 += 3  //error and cannot change variable name with const
}

//if
const num1 = 2;
let num2 = 6;
if (num1 === 2){
    num2 += 3  //num = 9
}

//else
if (num1 === 2){
    num2 += 3  
} else{
    num2 +=10
}
//if false - back run
//if true - back not run


//else if 
if (num === 5){
    num2 += 5;
} else if (num1 === 7){
    num2 += 10;
} else {
    num2  += 3;
}

//else if 
if (num === 5){
    num2 += 5;
} else if (num1 > 7){
    num2 += 10;
} else {
    num2  += 3;
}

let email = "zwehtetag2019@gmail.com"
let password = "12345678"
if (email==="zwehtetag2019@gmail.com" &&  password === "12345678" ){
    password += 999
}

/*
notmember = full price
normalmember = 5% discount
goldmember = 10% discount
platinummember = 15% discount
*/

let originalPrice = 100;
let totalPrice = 0 ;
let membertype = "notmember";
if(memberType==="notMember"){
  totalPrice = originalPrice;
}else if(memberType==="goldMember"){
  totalprice = 100 * 0.90;
}else if(memberType==="silverMember"){
  totalprice = 100 * 0.95;
}else if(memberType==="platinumMember"){
  totalprice = 100 * 0.85;
}

let originalprice = 100;
let totalprice = 0 ;
let membertype = "goldmember";

if(membertype === "goldmember"){
    totalprice = 100 * 0.90;
} else if(membertype === "normalmember"){
    totalprice = 100 * 0.95;
} else if(membertype === "platinummember"){
    totalprice = 100 * 0.85;
} else{
    totalprice = originalprice;
}

let fullPrice = 10000;
let totalPrice = 0;
let memberType = prompt("Get Discount")

if(memberType === "goldmember"){
    totalPrice = 10000 * 0.90;
} else if(memberType === "normalmember"){
    totalPrice = 10000 * 0.95;
} else if(memberType === "platinummember"){
    totalPrice = 10000 * 0.85;
} else{
    totalPrice = fullPrice;
}


let toyota;
let bmw;
let volk;
let userDrive = prompt("Enter the name of car");
if(userDrive === "toyota"){
    console.log("You can get TOYOTA car");
}else if(userDrive === "bmw"){
    console.log("You can get BMW car ");
}else if(userDrive === "volk"){
    console.log("You can get VOLK car ");
}else{
  console.log("Nothing")
}



// switch
switch(expression){
    case choice1:
        //run the code
        break;
    case choice2:
        //run the code
        break;
    default:
        //run the code
}

//example
let num1 = 2;
let  num2 = 0;
switch(num1){
    case 1:
        num2 += 3 ;
        break;
    case 2:
        num2 += 6 ;
        break;
    default:
        num2 += 10 ;
}

let zwe= 2;
let  htet= 0;
switch(zwe){
    case 1:
       htet += 3 ;
        break;
    case 2:
        htet += 6 ;
        break;
    default:
        htet += 10 ;
}

let userName = "myUserName";
let num2 = 2;
switch(userName){
  case "ourUserName":
  num2 += 10;
  break;
  case "myUserName":
  num2 += 20; 
  break;
  default:
  num2  += 12;
}

//function

//function declaration
let num1 = 0;
function square(){
   num1 = 2**2;
}
square (); //call function declaraion to use it

let num1 = 0;
function square(number){ //parameter
   num1 = number**2;//NaN = not a number
   
}
square (5); //call function declaraion to use it

//exmaple-1
let num1 = 0;
function calculate(number){ //parameter
   num1 = number**2 ;//NaN = not a number
   num1 += 4;
   num1 /= 2;
   
}
calculate (); 

//example-2
let num1 = 0;
function calculate(firstNumber, secondNumber ){ //parameter
   num1 = firstNumber * secondNumber ;//NaN = not a number
   num1 += 4;
   num1 /= 2;
   
}
calculate (5, 2); 

//example-3
let num1 = 0;
function calculate(firstNumber, secondNumber , thirdNumber){ //parameter
   num1 = firstNumber * secondNumber * thirdNumber ;//NaN = not a number
   num1 += 4;
   num1 /= 2;
   
}
//calculate (5, 2, 2); 

let myNumberOne = calculate (5, 2, 2); 
console.log(myNumber); // Undefined so No use Return keyword

//value returning function

function getNumber (number){
    return number
}

let myNumberTwo = getNumber (5); 
console.log(getNumber); // 5 so Use Return keyword 

//bult-in function

alert('Hello World')
alert(1)

//ES6 arrow function

const myarrowfunction = (para1 , para2) => {
    para1 * para2

}
myarrowfunction(2,3)


//Object syntax {} //empty object

/*
Example
name="Zwe Htet"
age=19
height=180
city="Yangon"
*/

const carInfo = {
   brand: Toyota,
   price: 2000,
}
let person1={
    name: "Zwe Htet", // properties
    age: 19,   // properties
    height: 180,  // properties
    city: "Yangon",  // properties
    dateOfBirth:2002,  // properties
    isActor: true,   // properties
    walk: () =>{    // method
        alert("Hello World")
    }
}

//Accessing object properties and methods
1)Dot notation

person1.name
person1.age
person1.height
person1.walk()

2)Bracket notation

person1["name"]
person1["age"]
person1["dateOfBirth"]
person1["walk"]()


//add+++ object
person1.hobby = "football";

//update object
person1.hobby = "volleyball";

//method new add+++
person1.eat = () => {
    alert("Zwe Htet is eating...")
}


const input1Value = "";
const input2Value = "";
const propertyName = "donatedBy" + input1Name;

person1[propertyName] = input2Name;

let carInfo = {
   brand : "Toyota",
   modal : 2019
}

// How to add object to main object
person1.car = carInfo ; 

let person1 = {
   name : "Zwe Htet",
   age : 17,
   isSingle : true,
   carInfo : {
   brand : "Toyota",
   modal : 2019
   walk : () => {
     alert("Walking....")
   }
}

//window object
alert("hello")
console.log("Welcome")
prompt("What's your sign?");

//Array
{}//empty object/unordered collection
[]//empty array/ordered collection

const unordered = {z: "Hello", 1: "World", a: "Zwe"} >>>> result = {1: "World", a: "Zwe" , z: "Hello",}
const ordered = ["Yangon", "Mandalay", "Naypyiatw"]

//index start(0)
 Yangon index-0
 Mandalay index-1
 Naypyitaw index-2

 //accessing array element
 ordered[0]
 ordered[1]
 ordered[2]

 //array .length property (how many array)
 ordered.length

 //push method (add+++)
 ordered.push("Taungyi")//from the end
 ordered.push("Thailand", "Singapore" , "Bago")//from the end
 ordered.unshift("Taungyi")//from the start
 ordered.pop("Taungyi")//remove the end
 ordered.pop();
 ordered.shift("Taungyi")//remove the first
 ordered.splice(1,1)//remove anywhere (index number,quatity)
ordered.slice(0,2);//["Yangon" , "Mandalay"] index / index - 1
ordered.join(",");//" Yangon, Mandalay, Naypyiatw "

 //get last item array
 const index = ordered.length - 1 ;
 ordered[index];
 ordered[ordered.length - 1];

 //know index 
 ordered.indexOf("Mandalay")

 let carInfo = {
   brand : "Toyota",
   modal : 2019
}
// How to add object to main array
 ordered.push(carInfo); //["Yangon", "Mandalay", "Naypyiatw",{..}]
//Loops


const customers = [
   {name: "customer1",  age: 18,    email: "zwe@gmail.com",           Job: "Frontend developer"    dateOfBirth : "1.10.2002"},
   {name: "customer2",  age: 12,    email: "william@gmail.com",       Job: "Backend developer"     dateOfBirth : "2.10.2002"},
   {name: "customer3",  age: 20,    email: "jjgrbh@gmail.com",        Job: "Fullstack developer"   dateOfBirth : "3.10.2002"},
   {name: "customer4",  age: 24,    email: "snjjjnjxnm@gmail.com",    Job: "Game developer"        dateOfBirth : "4.10.2002"},

];

for(let i =0 ; i < customers.length ; i++){
  let getCustomersEmail = customers[i].email;
  sendEmail(getCustomersEmail)
}

function sendEmail (a){
  console.log("Sending to : " ,a )
}

for (let i = 0 ; i < customers.length; i++){
    let customerEmail = customers[i].email;
    let customerBirthday = current[i].dateOfBirth;
    if(customerBirthday === "3.10.2002"){
      sendSpecailBirthdayDiscountEmail(customerEmail);
    }else{
    sendEmail(customerEmail);
}
}

 customers.push(
    {name: "customer5",    age: 128,    email: "qqqhjhjjkje@gmail.com",           Job: "Javascript developer"},
    {name: "customer6",    age: 42,     email: "hsdfilhjhjjliam@gmail.com",       Job: "Java Developer"},
    {name: "customer7",    age: 90,     email: "bhghjgbcxzh@gmail.com",           Job: "PHP developer"},
    {name: "customer8",    age: 54,     email: "aunjxnm@gmail.com",               Job: "Streamer"},
)

//get 
const customer1 = customers[0] ;
const customer1Email = customer1.email
    //or
const customer1 = customers[0].emial;
const customer2 = customers[1].email;
const customer3 = customers[2].email;


//send Email for customers
sendEmail(customer1Email);
sendEmail(customer2Email);
sendEmail(customer3Email);
sendEmail(customer4Email);

const sendEmail = (email) => {
 console.log("Sending email to: ", eamil)
}

const sendSpecailBirthdayDiscountEmail = (email) => {
 console.log("Sending Special Birthday Discount email to: ", eamil)
}

/* loops 

1.for
2.for/in
3.for/of
4.while
5.do/while
*/

for ( statement1 ; statement2 ; statement3 )   {

} 
for ( let i = 0 ; i < 3 ; i++)   {
    console.log('Hello World')
    
} 

//iteration 1, i = 0 (first)  ---> will run for loop body 
//iteration 2, i = 1 (second) ---> will run for loop body 
//iteration 3, i = 2 (third)  ---> will run for loop body 
//iteration 4, i = 3 (fourth)  ---> will NOT run for loop body 


for ( let i = 0 ; i < 5 ; i++)   {
    console.log('Hello World' , i)
    
} 


const cities = [ "Chesea" , "Madraid" , "Arsenal" , "United" , "Bercelona" ];
cities[0]//Chesea
cities[1]//Madraid
cities[2]//Arsenal

 for (let i = 0 ; i < cities.length; i++ ){
     console.log(cities[i] , i)

 }
 
 for (let i = 0 ; i < cities.length; i++ ){
    alert(cities[i] , i)

}


//for loop (Array looping)
const cities = ["Yangon" , "Mandalay" , "Sagaing" , "Chin" , "Shan" ];
for (let i = 0 ; i < cities.length; i++) {
      let city =cities[i];
      console.log(city);
}

//for in loop (Object looping)
Example1
const customers = {name: "customer1", age: 18,   email: "qqqhjhjjkje@gmail.com",   Job: "Javascript developer"};
for (let propertyName in customers){
    console.log(propertyName) 
}

Ans:
//first "name"
//second "age"
//third "email"

customers.email //qqqhjhjjkje@gmail.com
customers["email"] //qqqhjhjjkje@gmail.com

Example2
const customers = {name: "customer1", age: 18,   email: "qqqhjhjjkje@gmail.com",   Job: "Javascript developer"};
for (let propertyName in customers){
    console.log(customers[propertyName])

}
Ans:
//first "customer1"
//second "18"
//third "qqqhjhjjkje@gmail.com"

Example3
const customers = {name: "customer1", age: 18,   email: "qqqhjhjjkje@gmail.com",   Job: "Javascript developer"};
for (let propertyName in customers){
    console.log( propertyName ,customers[propertyName])

Ans:
//first "name customer1"
//second "age 18"
//third "email qqqhjhjjkje@gmail.com"

/* while loop */
 
prompt("Please enter a number between 1 and 100");
 //enter a number ----  -1
 prompt("Please enter a number between 1 and 100");
 //enter a number ----  -2
 prompt("Please enter a number between 1 and 100");
 //enter a number ----  0
prompt("Please enter a number between 1 and 100");
//enter a number ----  200

let validNumber = true;
while (validNumber){
    let promptValue = prompt("Please enter a number between 1 and 100"); //"20"   
    parseInt(number , 10) //change string number to number
    const parsedValue = parseInt(promptValue , 10)
    if (parsedValue > 1 && parsedValue < 100){
        console.log("Enter Value:" , parsedValue)
        validNumber = false;//exit condition
    }
}

let number = 1;
while ( number < 10 ){
    console.log("Enter Number:" , number)
    number++; // exit condition
}

/* Error handling */

//try....catch
try {
    const number = 1 ;
    number++;
    
} catch (error) {
    console.log("Hello World", error)
    
}

let userActiveName = ["Kyaw kyaw","Yu Yu","Nu Nu","Zaw Zaw"];

let showChatSidebar = () => {
  for(const i = 0 ; i < userActiveName.length ; i++){
    console.log("Hi Morning",i)
  }
}

let showLeftSidebar = () => {
  console.log("Hello Afternoon")
}

let showMainFeed = () => {
  console.log("Hi Evening")
}

//Start error handling for showChatSidebar
try{
  showChatSidebar();
}catch(err){
  for(let i = 0 ; i < userActiveName.length ; i++){
    console.log("Hi Morning",err ,i)
  }
}
//End error handling for showChatSidebar


showChatSidebar(); //error with no using error handling
showLeftSidebar();
showMainFeed();

/* Javascript Scope */

1) Local Javascript Variable
2)Global Javascript Variable


let country = "Japan"; // Global Scope
function myFunction(){
    // Can not use "var" At global scope but can use in this place 
    var carName = "Toyota";//local 
    //let, var, const
    num1 = 10;
    console.log(country); // can call "country" in local scope from global scope
}

myFunction(); // "Japan"
-->Start to reach global scope "num1" & can search num1 of value in window Object
window.num1 // 10
console.log(num1)// can use in global scope from no use (let, var, const) in local scope & no error But function name start to call first before to call (num1)
console.log(carName)// error


--> if you can search in window object , must declare only "var" & without anything (var/let/const) But no use "let / const" 
var city = "Yangon";
window.city // "Yangon"

let city = "Mandalay";
window.city // Undefined

const city = "Bago";
window.city // Undefined

city = "Pyin Oo Lwin";
window.city // "Pyin Oo Lwin"

//Block Scope = local Scope

{
    let num1 = 10;
    console.log (num1) //no error
}

console.log (num1)//raise error

Can use "var" At using Block Scope & become global scope
{
    let num1 = 10;
    const num2 = 100;
    var num3 = 30 ;
}

console.log (num1)//raise error
console.log (num2)//raise error
console.log (num3)//no error -> Result 30
window.num3 // Result 30


//example
let country = "Singapore";
let outerFunction = () => {
    var num1 = 10;//function scope
    if(num1 === 10) {
    var num3 = 30 ;
    let num4 = 20;
    const num5 = 100;
    
    }
    console.log (num3)//no error
    console.log (num4)//raise error
    console.log (num5)//raise error

    const innerFunction = () => {
    console.log (num3) // no error
    console.log (num4)//raise error
    console.log (num5)//raise error
    console.log (country) // "Singapore"
    }
    innerFunction(); // no error
}
innerFunction(); // error
outerFunction();

/* continue & break */
const customers = [
   {name: "customer1", age: 18,   email: "zwewwqqq@gmail.com",    Gender:"Female"},
   {name: "customer2", age: 12,   email: "williamq@gmail.com",    Gender:"male"},
   {name: "customer3", age: 20,   email: "jjgrbhxd@gmail.com",    Gender:"Female"},
   {name: "customer4", age: 30,   email: "snjjjnjx@gmail.com",    Gender:"male"}

]

//continue for FOR loop

for (let i = 0 ; i < customers.length; i++) {
      let currentCustomer  = customer[i];
      if (currentCustomer.Gender === 'male'){
        continue; // next looping
      }
      console.log( "Sending Email to : ",currentCustomer.email);  // female email
}
 
//break for FOR loop

for (let i = 0 ; i < customers.length; i++) {
      let currentCustomer  = customer[i];
    console.log( "Sending Email to : ",currentCustomer.email);
      if (i === 2){
        break; // end looping at index-2
      }
      console.log( "Sending Email to : ",currentCustomer.email);
}

//continue for WHILE loop
let i = 0;
while(i < customers.length){
  let currentCustomer = customers[i];
  i++; // exit condition
  if(currentCustomer.Gender === "male"){
    continue;
  }
  console.log("Sendig to : ",currentCustomer) // female email
}

//break for WHILE loop
let i = 0 ;
while (i < customers.length) {
      let currentCustomer  = customer[i];
      console.log( "Sending Email to : ",currentCustomer.email);  // female email
      i++; // exit condition
      if (i === 2){
        break;
      }
}


/* 2 dimensional Array */

const num1 = [1,2,3]; // One dimensional Array
const num1 = [[1,2],[3,4],[5,6]];  // Two dimensional Array

//Acess
num1[0] //1
num2[1] //[3,4]
num2[2] //[5,6]
num2[num2.length-1] //[5,6]

// Looping Array (1D)
for(let i = 0 ; i < num1.length ; i++){
  let element = num1[i];
  console.log(element);
}

// Looping Array (2D)
for(let i = 0 ; i < num2.length ; i++){
  let currentArray = num2[i]; //[1,2]
  //console.log(currentArray);
  for(let j = 0 ; j < currentArray.length , j++){
    let currentElement = currentArray[j];
    console.log(currentElement); -> //1/2/3/4/5/6
  }
}

// Looping Array (2D)
for(let i = 0 ; i < num2.length ; i++){
  let currentArray = num2[i]; //[1,2]
  //console.log(currentArray);
  for(let i = 0 ; i < currentArray.length , i++){
    let currentElement = currentArray[i];
    console.log(currentElement); -> //1/2/3/4/5/6
  }
}

// Looping Array (2D)
for(var i = 0 ; i < num2.length ; i++){
  let currentArray = num2[i]; //[1,2]
  //console.log(currentArray);
  for(var i = 0 ; i < currentArray.length , i++){
    let currentElement = currentArray[i];
    console.log(currentElement); -> //1/2
  }
}
*Why not to use same variable name in var by using loop?
 var (function scope) is not block scope

 outer i = 0
 inner i = 0
 console = 1
 inner i = 1 i++
 console = 2
 inner i = 2 i++
 outer i = 3 i++

NO Same 
 {
   let i = 0;
 }
 {
   let i = 0;
 }

Same 
 {
   var i = 0;
 }
 {
   var i = 0;
 }

/* Destructuring & Spread Operator & Rest Parameter (ES6 Features) */

//Object Destructuring
const customer = {name: "customer4", age: 30, email: "snjjjnjx@gmail.com", Gender:"male"}
const name = customer.name ;
const email = customer.email ;
const Gender  = customer.Gender ;
//ES6
const {name , email, Gender} =  customer;
console.log(name , email, Gender);


//Array Destructuring

const clubs = [ "Chesea" , "Madraid" , "Arsenal" , "United" , "Bercelona" ];
const club1 = clubs[0];
const club2 = clubs[1];
const club3 = clubs[2];
//ES6
const [club1,club2,club3] =  customer;//"Chesea" , "Madraid" , "Arsenal"
const [club1,club3] =  customer;//"Chesea" , "Arsenal"
const  newCitiesArray = ["Astonvilla",...clubs];
console.log(club1, ,club3) =  clubs;

/* Spread Operator */
//object
const customer = {name: "customer4", age: 30,   email: "snjjjnjx@gmail.com",    Gender:"male"}
const copyCustomer = Object.assign ({} , customer);//{name: "customer4", age: 30,   email: "snjjjnjx@gmail.com",    Gender:"male"}
//ES6
const copyCustomer = {...customer};

//Array
const clubs = [ "Chesea" , "Madraid" , "Arsenal" , "United" , "Bercelona" ];
const newCitiesArray = [].concat(clubs);//[ "Chesea" , "Madraid" , "Arsenal" , "United" , "Bercelona" ];
//ES6
const  newCitiesArray = [...clubs];
const  newCitiesArray = ["Astonvilla",...clubs]; //["Astonvilla", "Chesea" , "Madraid" , "Arsenal" , "United" , "Bercelona" ];
const  newCitiesArray = [...clubs,"Astonvilla"]; //[ "Chesea" , "Madraid" , "Arsenal" , "United" , "Bercelona","Astonvilla" ];

/*  Rest Parameter */

const calculate = (x,y) => {
    return x+y;
}
calculate(1,2,3);

//Rest Parameter
Example1
const calculate = (...params) => {
    console.log(params)
}
calculate(1,2,3,4,5);

Example2
const calculate = (...params) => {
     let total = 0;
    for (let i = 0 ; i < params.length; i++) {
        total += params[i];
      }
    return total
}
 calculate(1,2,3,4,5);
 let result = calculate(1,2)
 console.log(result)//3     

/* Callback Function */

const fetchData = (callback) => {
  console.log("fetching data from server")
  callback()
}

const showUserProfile = () => {
  console.log("code to show user profile")
}

fetchData(showUserProfile); 
showUserProfile();

          or 

const fetchData = () => {
  console.log("fetching data from server")
  showUserProfile();
}

const showUserProfile = () => {
  console.log("code to show user profile")
}

fetchData(); 

//global scope
const fetchData = (callback) => {
  console.log("fetching data from server")
  callback();
  showUserProfile();//error
}

const outerFunction = () =>{
  //fuction local scope
  const showUserProfile = () => {
  console.log("code to show user profile")
}
fetchData(showUserProfile);//no error
}

outerFunction() ;


/* Most Used built-in methods and functions */

//ES6 Array filter,map
//Array Filter
const customers = [
   {name: "customer1", age: 18,   email: "zwewwqqq@gmail.com",    Gender:"Female"},
   {name: "customer2", age: 12,   email: "williamq@gmail.com",    Gender:"male"},
   {name: "customer3", age: 20,   email: "jjgrbhxd@gmail.com",    Gender:"Female"},
   {name: "customer4", age: 30,   email: "snjjjnjx@gmail.com",    Gender:"male"}

]

//One
customers.filter(isMale);
const isMale = (arrayElement) => {
    return arrayElement.Gender === "male";
}

const isMale = (arrayElement) =>  arrayElement.Gender === "male";


//Two
customers.filter(arrayElement=> arrayElement.Gender === "male" && arrayElement.age > 25);

let numbers  = [1,2,3,4,5];
let result = numbers.filter(num => num > 3 ) 
console.log(result)//[4,5]

/* Array Map with arrow function */

const customers = [
   {name: "customer1", age: 18,   email: "zwewwqqq@gmail.com",    Gender:"Female"},
   {name: "customer2", age: 12,   email: "williamq@gmail.com",    Gender:"male"},
   {name: "customer3", age: 20,   email: "jjgrbhxd@gmail.com",    Gender:"Female"},
   {name: "customer4", age: 30,   email: "snjjjnjx@gmail.com",    Gender:"male"}

]
Example1
for (let i = 0 ; i < customers.length; i++) {
        customers[i].bookings = [];
      }


customers.map(addBooking)
let addBooking = (element => {
    element.bookings = [];
    return element;
});


customers.map(element => {
    element.bookings = [];
    return element;
});

Example2
const numbers = [1,2,3,4,5]
let result = numbers.map (number => num * 2)

/* Most used buil-in methods & properties */

//String
let textString = "Welcome to Myanmar";
textString.toUpperCase();//WELCOME TO MYANMAR
textString.toLowerCase();//welcome to myanmar
textString.length;//18
textString.indexOf("z");//-1
textString.indexOf("e");//1

//Number
let num = "10";
let result = parseInt(num,10);//10
result < 10;

let num = "10";
num.toString();//10

//Object

let customer = {name: "customer4", age: 30,   email: "snjjjnjx@gmail.com",    Gender:"male"}
Object.keys(customer);
Object.values(customer);
customer.hasOwnProperty("age");//false
customer.hasOwnProperty("name");//true





/* JavaScript Summary */

/*******************************************  
  ****************************************** 
  1. Data and structure types
  ****************************************** 
******************************************* */
undefined; // undefined
null; // null
true, false; // Boolean
"Yangon", "Mandalay"; // String
25, 1.2; // Number
{
  key: "value";
} // Object
() => {}; // Function

/*******************************************  
  ****************************************** 
  2. Variables
  ****************************************** 
******************************************* */
// var, let, const
// var (global, function scope), let and const (global, block scope {})
// global scope
var num1 = 10;
var myFunc = () => {
  // function scope
  var num2 = 20;
  console.log(num2);
};
console.log(num1);
console.log(num2);

{
  // block scope
  var num3 = 30;
  let num4 = 40;
  const num5 = 50;
}

console.log(num3);
console.log(num4); // cannot access num4 here here
console.log(num5); // cannot access num5 here here

var num1 = 10;
var num1 = 20; // replace num1 value

//global scope
let num2 = 10;
let num2 = 20;//error

let num2 = 10;
{
  let num2 = 20;// No error
}

//global scope
const num3 = 10;
const num3 = 20;//error

const num3 = 10;
{
  const num3 = 20;// No error
}

let num2 = 10;
num2 = 20; // update num2 value

const num3 = 10;
num3 = 20; // will raise error. cannot update const variable value

/*******************************************  
  ****************************************** 
  3. Operators
  ****************************************** 
******************************************* */
/* Arithmetic operators */
// + (Addition)
let num1 = 2;
let num2 = 3;
let num3 = num1 + num2; // num3 = 5

let str1 = "hello";
let str2 = "world";
let str3 = str1 + str2; // str3 = "helloworld" (String concatenation)
let str3 = str1 + " " + str2; // str3 = "hello world"

// - (Subtraction)
let num1 = 2;
let num2 = 3;
let num3 = num1 - num2; // num3 = -1

// * (Multiplication)
let num1 = 2;
let num2 = 5;
let num3 = num1 * num2; // num3 = 10

// / (Division)
let num1 = 6;
let num2 = 3;
let num3 = num1 / num2; // num3 = 2

// % (Remainder)
let num1 = 11;
let num2 = 3;
let num3 = num1 % num2; // num3 = 2

// ** (Exponent)
let num1 = 5;
let num2 = 2;
let num3 = num1 ** num2; // num3 = 25

/* Increment and decrement */
// ++
let num1 = 1;
let num2 = num1++; // num2 = 2

// --
let num1 = 1;
let num2 = num1--; // num2 = 0

// cannot do 1++ for example, must use a variable that is not constant(const)

/* Assignment operators */
// =
let num = 1;

// += (Addition assignment)
let num = 1;
num += 5; // num = 6

// -= (Subtraction assignment)
let num = 10;
num -= 5; // num = 5

// *= (Multiplication assignment)
let num = 5;
num *= 2; // num = 10

// /= (Division assignment)
let num = 10;
num /= 2; // num = 5

/* Comparison operators */
// == vs ===
let num = 5;
num == "5"; // output true
num === "5"; // output false

// != vs !==
let num = 5;
num != "5"; // output false
num !== "5"; // output true

// > (greater than) and < (less than)
let num1 = 2;
let num2 = 3;
num1 > num2; // output false
num1 < num2; // output true

// >= (greater than or equal to) and <= (less than or equal to)
let num1 = 2;
let num2 = 3;
num1 >= num2; // output false
num1 <= num2; // output true

/* Logical operators */
let num1 = 5;
let num2 = 10;

// && (and logical operator).
num1 > 3 && num2 < 10; // false
num1 < 7 && num2 > 5; // true

// || (or logical operator)
num1 > 3 || num2 < 10; // true
num1 > 7 || num2 < 5; // false
num1 >= 5 || num2 <= 10; // true

// ! (not logical operator)
!(num1 === num2); // true
!(num1 < num2); // false

let username = "test@gmail.com";
let password = "mypass";

username === "test@gmail.com" && password === "myPass";

/*******************************************  
  ****************************************** 
  4. Conditional Statements
  ****************************************** 
******************************************* */
// if
const num1 = 2;
let num2 = 0;
if (num1 === 5) {
  num2 += 5;
}

// else
if (num1 === 5) {
  num2 += 5;
} else {
  num2 += 10;
}

// else if
if (num1 === 2) {
  num2 += 5;
} else if (num1 < 3) {
  num2 += 8;
} else if (num1 < 5) {
  num2 += 200;
} else {
  num2 += 10;
}

if (num1 < 1) {
  num2 += 5;
} else if (num1 < 3) {
  num2 += 8;
} else if (num1 < 5) {
  num2 += 200;
} else {
  num2 += 10;
}

if (num1 < 3) {
  num2 += 10;
} else if (num1 < 3) {
  num2 += 8;
} else if (num1 < 5) {
  num2 += 200;
} else {
  num2 += 10;
}

/* 
  Airline ticket example 

  notMember = full price
  normalMember = 5% discount
  silverMember = 10% discount
  goldMember = 15% discount
  platinumMember = 20% discount
*/

const originalPrice = 100;
let totalPrice = 0;
let memberType = "notMember";

if (memberType === "normalMember") {
  totalPrice += 100 * 0.95;
} else if (memberType === "silverMember") {
  totalPrice += 100 * 0.9;
} else if (memberType === "goldMember") {
  totalPrice += 100 * 0.85;
} else if (memberType === "platinumMember") {
  totalPrice += 100 * 0.8;
} else {
  totalPrice = originalPrice;
}

// switch conditional statement
switch (expression) {
  case choice1:
    //run this code
    break;
  case choice2:
    //run this code
    break;
  default:
  // run this code if no case matches
}

// Example
const num1 = 2;
let num2 = 0;

switch (num1) {
  case 1:
    num2 += 1;
    break;
  case 2:
    num2 += 2;
    break;
  default:
    num2 += 3;
}

const clickedTab = "VIDEOS";

switch (clickedTab) {
  case "HOME":
    // 1) hide current show tab. 2) show home tab
    break;
  case "VIDEOS":
    // 1) hide current show tab. 2) show videos tab
    break;
  case "PLAYLISTS":
    // 1) hide current show tab. 2) show playlists tab
    break;
  case "CHANNELS":
    // 1) hide current show tab. 2) show channels tab
    break;
  case "DISCUSSION":
    // 1) hide current show tab. 2) show discussion tab
    break;
  case "ABOUT":
    // 1) hide current show tab. 2) show about tab
    break;
  default:
  // 1) hide current show tab. 2) show about tab
}

/*******************************************  
  ****************************************** 
  5. Function
  ****************************************** 
******************************************* */
// function declaration
// DRY = Don't Repeat Yourself
let num1 = 0;
// parameter
function calculate(number) {
  num1 = number ** 2;
  num1 += 4;
  num1 /= 2;
}

// value returning function
const calculate = (number) => {
  num1 = number ** 2;
  num1 += 4;
  num1 /= 2;
  return num1;
};

// call the declared function to use it
let result = calculate(5);
calculate(4);
calculate(3);

// Built-in function
alert("Hello world");
console.log("hello world");

// Why do we need function? To avoid repetitive code as below.
// for number = 5
let total = 0;
let number = 5;
// start
total = number * 2;
total += 4;
total /= 2;

// for number = 4
let total = 0;
let number = 4;
// start
total = number * 2;
total += 4;
total /= 2;

// for number = 3
let total = 0;
let number = 3;
// start
total = number * 2;
total += 4;
total /= 2;

/*******************************************  
  ****************************************** 
  6. Object
  ****************************************** 
******************************************* */
// why?
const num1 = 10;
const cityName = "Yangon";
const isLoggedIn = true;
/*
name = "Aung Paine"
age = 50
height = 180
city = "Yangon"
isActor = true
*/
{
} // empty object
const person1 = {
  name: "Aung Paine", // key value pair
  age: 50,
  height: 180,
  city: "Yangon",
  dateOfBirth: 1970,
  isActor: true,
  hobby: ["Chine-lone", "Football"],
  walk: () => {
    alert("Aung Paine is walking now..");
  },
  cat: {
    name: "meow",
    age: 5,
    personality: "playful",
    purchaseInfo: {
      date: "20.12.2020",
      price: 5000,
    },
  },
};

// Accessing object's properties and methods
// 1) dot notation
person1.name; // "Aung Paine"
person1.age;
person1.height;
person1.dateOfBirth;
person1.walk();

// 2) bracket notation
person1["name"];
person1["age"];
person1["age"];
person1["dateOfBirth"];
person1["walk"]();

// Accessing property inside nested object
person1.cat.purchaseInfo.price;
person1["cat"]["purchaseInfo"]["price"];

// Call method which name comes from a variable using bracket notation
const methodName = "walk";
person1[methodName]();

/*******************************************  
  ****************************************** 
  7. Array
  ****************************************** 
******************************************* */
{
} // empty object, unordered collection
[]; // empty array, ordered collection

// why?
const unordered = { z: "hello", 1: "world", a: "test" };
const ordered = [
  "Yangon",
  "Mandalay",
  "Myitkyina",
  "Taungyi",
  1,
  true,
  {
    name: "Aung Paine", // key value pair
    age: 50,
    height: 180,
    city: "Yangon",
    dateOfBirth: 1970,
    isActor: true,
    walk: () => {
      alert("Aung Paine is walking now..");
    },
    cat: {
      name: "meow",
      age: 5,
      personality: "playful",
      purchaseInfo: {
        date: "20.12.2020",
        price: 5000,
      },
    },
  },
];

ordered[6].cat.purchaseInfo.price;

// index starts at 0
// Accessing array element
ordered[0]; // index number starts at 0
ordered[1];
ordered[2];

// array.length property
ordered.length; // 4

// get last item from an array
const index = ordered.length - 1;
ordered[index];

// add element to the end of an array
ordered.push("Taungyi", "Test");

// add element to the begining of an array
ordered.unshift("Beijing");

// remove the last element from an array
let result = ordered.pop();

// remove element from the beginning of an array
ordered.shift();

// get index of an element
ordered.indexOf("Shanghai"); // -1

// remove element(s) by index position
ordered.splice(2, 2);

/*******************************************  
  ****************************************** 
  8. Loops
  ****************************************** 
******************************************* */
// DRY - Don't Repeat Yourself
const customers = [
  {
    name: "customer1",
    phoneNumber: "1234567",
    email: "customer1@gmail.com",
    dateOfBirth: "01.01.2000",
  },
  {
    name: "customer2",
    phoneNumber: "2345671",
    email: "customer2@gmail.com",
    dateOfBirth: "02.03.2001",
  },
  {
    name: "customer3",
    phoneNumber: "3456712",
    email: "customer3@gmail.com",
    dateOfBirth: "01.01.2002",
  },
  {
    name: "customer4",
    phoneNumber: "4567123",
    email: "customer4@gmail.com",
    dateOfBirth: "01.01.2003",
  },
];

// for loop
for (let i = 0; i < customers.length; i++) {
  let customerEmail = customers[i].email;
  let customerBirthday = customers[i].dateOfBirth;
  if (customerBirthday === "15.10") {
    sendingBirthdayDiscountEmail(customerEmail);
  } else {
    sendEmail(customerEmail);
  }
}

const sendEmail = (email) => {
  console.log("Sending email to: ", email);
};

const sendingBirthdayDiscountEmail = (email) => {
  console.log("Sending special birthday discount email to: ", email);
};

// get customers email
const customer1 = customers[0];
const customer1Email = customer1.email;
const customer2Email = customers[1].email;
const customer3Email = customers[2].email;
const customer4Email = customers[3].email;

// send email
sendEmail(customer1Email);
sendEmail(customer2Email);
sendEmail(customer3Email);
sendEmail(customer4Email);

for (let i = 0; i < 3; i++) {
  console.log("hello");
}

// iteration1, i = 0 --> will run for loop body
// iteration2, i = 1 --> will run for loop body
// iteration3, i = 2 --> will run for loop body
// iteration4, i = 3 --> will NOT run for loop body

const cities = ["Yangon", "Mandalay", "Myitkyina", "Beijing", "Shanghai"];
console.log(cities[0]); // "Yangon"
cities[1]; // "Mandalay"
cities[2]; // "Myitkyina"

for (let i = 0; i < cities.length; i++) {
  console.log(cities[i]);
}

const sendingBirthdayDiscountEmail = (email) => {
  console.log("Sending birthday discount email: ", email);
};

// for in loop
const customers = {
  name: "customer1",
  phoneNumber: "123456",
  email: "customer1@gmail.com",
};
for (let prop in customers) {
  console.log(customers[prop]);
}

// while loop
let validNumber = true;
while (validNumber) {
  let promptValue = prompt("Please enter a number between 1 and 100"); // "50"
  const parsedValue = parseInt(promptValue, 10); // 50
  if (parsedValue > 1 && parsedValue < 100) {
    console.log("Entered value: ", parsedValue);
    validNumber = false; // exit condition
  }
}

/*******************************************  
  ****************************************** 
  9. Error Handling
  ****************************************** 
******************************************* */
// try...catch
const users = ["Maria", "Marcus", "Ken", "Hannah"];

const showChatSidebar = () => {
  for (const i = 0; i < users.length; i++) {
    console.log("code to show user here..");
  }
};

const showLeftSidebar = () => {
  console.log("code to show left side bar here..");
};

const showMainFeed = () => {
  console.log("code to show main feed here..");
};

try {
  showChatSidebar();
} catch (err) {
  console.log("Catch error here: ", err);
}

showLeftSidebar();
showMainFeed();

/*******************************************  
  ****************************************** 
  10. Useful built-in operators, properties and methods
  ****************************************** 
******************************************* */
// String
const text = "Welcome To Myanmar";
text.toUpperCase(); // "WELCOME TO MYANMAR"
text.toLowerCase(); // "welcome to myanmar"
text.split(" "); // ["Welcome", "To", "Myanmar"]
text.split(""); // ["W", "e", "l", "c", "o", "m", "e", " ", "T", "o", " ", "M", "y", "a", "n", "m", "a", "r"]
text.indexOf("e"); // return 1
text.indexOf("T"); // return 8
text.length; // return 18
// string concatenation
"Welcome " + "to Myanmar";
const num1 = "23";
const num2 = parseInt(num1, 10);

// Number
const num1 = 20;
num1.toString(); // "20"

// Object
const customer = {
  name: "customer1",
  email: "customer1@gmail.com",
  gender: "famale",
};
Object.keys(customer); // ["name", "email", "gender"]
Object.values(customer); // ["customer1", "customer1@gmail.com", "famale"]
customer.hasOwnProperty("name"); // true
customer.hasOwnProperty("name2"); // false

// Array
const cities = ["Yangon", "Mandalay", "Myitkyina"];
cities.length; // 3
cities[cities.length - 1]; // "Myitkyina"
cities.push("Beijing"); // cities = ["Yangon", "Mandalay", "Myitkyina", "Beijing"]
cities.indexOf("Yangon"); // 0
cities.indexOf("Myitkyina"); // 2
cities.splice(0, 1); // cities = ["Mandalay", "Myitkyina"]
cities.pop(); // cities = ["Yangon", "Mandalay"]

const customers = [
  { name: "customer1", email: "customer1@gmail.com", gender: "female" },
  { name: "customer2", email: "customer2@gmail.com", gender: "male" },
  { name: "customer3", email: "customer3@gmail.com", gender: "female" },
  { name: "customer4", email: "customer4@gmail.com", gender: "male" },
];

// filter
customers.filter((element) => element.gender === "female");

// map
customers.map((element) => {
  element.location = "Yangon";
  return element;
});

// looping 2 dimensional (2D) array
const numbers = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
];
// nested loop
for(let i = 0; i < numbers.length; i++){
  let currentArray = numbers[i];
  for(let j = 0; i < currentArray.length; j++){
    console.log(currentArray[j])
  }
}



for (let i = 0; i < numbers.length; i++) {
  for (let j = 0; j < numbers[i].length; j++) {
    console.log("Current number is ", numbers[i][j]);
  }
}

// ternary operator
const isMale = true;
if (isMale) {
  console.log("Gender is male");
} else {
  console.log("Gender is not male");
}

isMale ? console.log("Gender is male") : console.log("Gender is not male");


// Document Object Model (DOM) 
// DOM CRUD

C - Create
let h1Element = document.createElement("h1");
let textNode = document.createTextNode("Hello Myanmar");
h1Element.appendChild(textNode);
let tagCollection = document.getElementsByTagName("body");
let bodyElement = tagCollection[0];
bodyElement.appendChild(h1Element);

R - Read
let readH1Element = document.getElementsByTagName("h1")[0];
console.log("Before Update" ,readH1Element.textContent )

U - Update
readH1Element.textContent = "Hello Mandalay";
console.log("After Update" , readH1Element.textContent );

D - Delete
readH1Element.remove();

// Events(Emitter & handler or listener)

//Template literal(template string) ``

Rest Parameter

fuction multi(num1,num2){
  return num1 * num2
}

console.log(multi(2,4))

fuction multi(...num,name){// error because rest parameter must be last
fuction multi(...num){// error because rest parameter must be last
fuction multi(name,...num){// error because rest parameter must be last
  console.log(name);
  let total = 1 ;
  for (n of num){
    total += n;
  }
  console.log(total)
}

multi("ZHA",1,2,3,4) // 24

Spread Operator

let fruits  = ["apple","mango"];
let fullFruit = [...fruits,"orange"];
console.log(fullFruit);

var personDetails = {
  name : "Zwe",
  age : 21
};

let fullId = {...personDetails,location : "yangon", phone : 0298303};
console.log(fullId);

//Destructuring

let fruits = ["apple","mango","orange","grape"];
let [one,two,three] = fruits;
console.log(one,two); apple orange

let person = {
   name : " Zwe htet ",
   age  : 24,
}

let {name,age} = person;
console.log(name,age); Zwe htet 24

//For in(index) & For of(value)

let name = "zha";
for(n in name){
  console.log(num); // 0 1 2
}

for(n of name){
  console.log(num); // z h a
}

let fruits = ["apple","mango","orange","grape"];
for(f in fruits){
  console.log(f); // 0 1 2 3
}

for(f in fruits){
  console.log(fruits[f]); //  apple , mango , orange , grape
}

for(f of fruits){
  console.log(f); //  apple , mango , orange , grape
}


class Person {
   constructor(name){
     console.log("I am constructor",name);
   }
   static showName(){
     console.log("I am static method");
   }
}

let p = new Person("Hi");
Person.showName();


class Employer extrends Person{
   constructor(name){
      super(name);
      console.log(name);
   }
}

let e = new Employer("william");

//Module system

for helper.js
export fuction sum(...num){
   let total = 0;
   for (n of num){
     total += n ;
   }
   return total;
}
export let name = "Zwe Htet";
export let showName = ()=>
{
  console.log("show name function");
}

export default fuction welcome(){
  console.log("welcome");
}

export default name = "zzz";

for index.js
import{sum,name,showName} from "./helper.js"
import{sum} from "./calculator.js"
import w from "./helper.js";
import hello from "./helper.js";
console.log(sum(1,2,3)) // 6
console.log(name) // Zwe Htet
showName();
w();
console.log(hello); //zzz

import{sum as helperSum ,name,showName} from "./helper.js"
import{sum as cSum} from "./calculator.js"
console.log(helperSum(1,2));
console.log(cSum(1,2));

for calculator.js
export fuction sum(...num){
   let total = 0;
   for (n of num){
     total += n ;
   }
   return total;
}

//Axios
axios.get("fetchdatalink").then(res=>console.log(res.data))

let fetchData = async()=>{
   let res = await axios.get("fetchdatalink");
   console.log(res.data);
}

fetchData();
